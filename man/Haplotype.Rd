% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{class}
\name{Haplotype-class}
\alias{.Haplotype}
\alias{Haplotype-class}
\title{The data structure that holds a haplotype}
\description{
The data structure that holds a haplotype
}
\details{
A haplotype will be defined by specifying:
\itemize{
  \item a number of input sequences (possibly only one)
  \item a distance measure (can be complex and based on a 'custom' substitution matrix),
  \item a threshold
  \item the copies list (see note about non-uniqueness)
}
The threshold will the the
maximum average distance that a sequence can be from all the sequences
initally specified and still be consired part of the haplotype.

A further complication is introduced by the fact that the sequences are not
necessarily unique. If the
number of repeated sequences is large, then very substantial performance
increases can be achieved by working on only the unique sequences. This
performance increase is so large that it is absolutely worthwhile to
implement special features to take advantage of it. (19.5 sec on unqiue
sequences vs > 5 hours on non-unique sequences on sample data from CAPRISA)

To handle the non-uniquess of the sequences, the input sequences specified
will only include unique sequences. The names associated with those
sequences are the names allocated by the uniq method for the data structure
that was used to store the sequence. Usually an XStringSet from the
biostrings package. A further list will be included in the
haplotype data structure that contains for each input name, the number of
sequences that are identical to it and a character vector of their names.

For this data structure the following methods will be implemented:
\itemize{
  \item is_member_of()
  \item distance_from()
  \item diversity()
  \item some functions to investigate how many copies of the sequences there
  are.
  \item ...
}

By specifying only a single input sequence and a distance of zero, it will
be possible to construct haplotypes that consist of only identical
sequences.

The distance concept is extremely complex. There are currently two
different distance approaches under consideration:
\itemize{
  \item biostrings::stringDist - can use either alignment or edit based
  distances
  \item ape::dist.dna - uses phylogenetic distances based on things like the
  Jukes-Cantor model (and more complex variants)
}

To ensure a flexible approach to distances, write a wrapper which allows the
users to select which distance needs to be used. The wrapper can be extended
over time to include both distance functions as well as others. Start by
using stringDist and allowing the use of a custom substitution matrix.

We do not want to compute a distance matrix, but only the vector of
distances between the new vector and each member of the haplotype. The
standard dist() based approach is thus unsuitable.

However, when plotting the phylogenetic tree of the haplotype, the distance
matrix is required. Does this mean that two different distance functions
must be suplied? Or is there an elegant way of using 1 for both these
purposes?

Brainstorming some ideas:

Two different functions: dist1_pwa and dist2_pwa for example. The first one
computes the distances between a value and a vector and the second one
computes the normal distance matrix. This leads to extra complexity when
constructing the objects (an extra complicated argument) but it will be
vastly faster than computing a distance matrix and only selecting out one
column in the end?

One single function: Two options, a distance function that output a distance
object so that you then only use 1 column - extremely computationally
inefficient OR a distance function like dist1_pwa and then you have to
manually construct the distance matrix?
}

